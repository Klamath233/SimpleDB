package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    
    // Private variables.
    JoinPredicate joinPredicate;
    DbIterator child1;
    DbIterator child2;
    Tuple left;
    Tuple right;
    DbIterator[] children;
    
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.joinPredicate = p;
    	this.child1 = child1;
    	this.child2 = child2;
    	this.left = null;
    	this.right = null;
    	this.children = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.child1.getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	return this.child2.getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	this.child1.open();
    	this.child2.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	this.child1.close();
    	this.child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	this.child1.rewind();
    	this.child2.rewind();
    	this.left = null;
    	this.right = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	
    	// Iteration.
    	if (!this.child2.hasNext()) {
    		if (!this.child1.hasNext()) {
    			return null;
    		} else {
    			this.left = child1.next();
    			this.child2.rewind();
    			this.right = child2.next();
    		}
    	} else {
    		if (this.left == null) { // Initial case.
    			if (this.child1.hasNext()) {
    				this.left = this.child1.next();
    			} else {
    				return null;
    			}
    		}
    		this.right = child2.next();
    	}
    	
    	Tuple retval = new Tuple(this.getTupleDesc());
    	int newTupleFieldPtr = 0;
    	for (int i = 0; i < this.left.getTupleDesc().numFields(); i++, newTupleFieldPtr++) {
    		retval.setField(newTupleFieldPtr, this.left.getField(i));
    	}
    	for (int i = 0; i < this.right.getTupleDesc().numFields(); i++, newTupleFieldPtr++) {
    		retval.setField(newTupleFieldPtr, this.right.getField(i));
    	}
        return retval;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return this.children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	this.children = children;
    }

}
