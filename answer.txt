SimpleDB Lab2 Writeup

Xi Han 504136747 xihan94@ucla.edu
Runhang Li 204134617 marklrh@gmail.com

----------------------------------------------
Basic introduction to our eviction policy:

We decide to maintain a LRU cache and use ConcurrentHashMap<PageId, Integer> as a LRU cache.

If the bufferpool is not full, when a getPage request comes in, we check if the corresponding
PageId is in LRU cache. If it is inside, we add one to each PageId in our LRU cache, which 
means that their time staying in LRU cache are increased and then we change the value corresponding
with the PageId being requested to one, meaning that it gets hit and its age now is one. However,

If the bufferpool is full and a getPage request comes in but the PageId is not in
the keyset of out bufferpool, we know it is the time to do eviction. We loop through the LRU cache
to find the PageId with maximum age. We got this PageId and delete it and its corresponding
value in both LRU cache and bufferpool(Before deletion, we write it back). In this way, bufferpool will have space to accept new page. Of course, we increment age by one for each PageId in LRU cache
and insert our new PageId with age one into LRU cache.

----------------------------------------------
Changes made to the API

none.

----------------------------------------------
Missing parts

none.

----------------------------------------------
Time spent
Runhang Li - 1 hour
Xi Han - 4 hours

